# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # BIROLINI : Déclaration du chemin complet correspondant à ASSET
    # ( appel : 
    #       déclarations:   use Symfony\Component\DependencyInjection\ContainerInterface;
    #                       Private $container;
    #       instanciation:  function _construct(ContainerInterface $container)
    #                       $this->container=$container;
    #       récupération:   $this->container->getParameter('var_name')
    # )
    #   NE MARCHE PAS
    asset_path_dev: '%kernel.project_dir%/assets/'
    asset_path_prod: '%kernel.project_dir%/public/build/'

    #  **** ABANDONNE ****
    # array_imgfiles_user_path: ['images/','uploads/','user/']
    
    #  **** Impossible car erreur à cause du 1er @... ****
    # pattern_road: "@[a-zA-Z\'àáâãäåçèéêëìíîïðòóôõöùúûüýÿ \d-]@ig"
    # pattern_city: "@[a-zA-Z\'àáâãäåçèéêëìíîïðòóôõöùúûüýÿ -]@ig"
    
    # **** BIROLINI : récupère la variable d'envirronement déclarée dans .ENV ****
    #   NE MARCHE PAS
    # # ( appel : $this->container->getParameter('API_GMAPS_KEY') )
    # API_GMAPS_KEY: '%env(API_GMAPS_KEY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # BIROLINI : NE marche pas !!
    # App\Twig\FrenchGeographyTwig:
    #     arguments: [$logger: '@logger', $api_gmaps_key: '%api_gmaps_key%']